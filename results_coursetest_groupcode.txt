npm verb cli [
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/node',
npm verb cli   '/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/bin/npm',
npm verb cli   'run',
npm verb cli   'test',
npm verb cli   '--verbose',
npm verb cli   'tests/'
npm verb cli ]
npm info using npm@8.5.0
npm info using node@v16.14.2
npm timing npm:load:whichnode Completed in 1ms
npm timing config:load:defaults Completed in 2ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 1ms
npm timing config:load:cli Completed in 2ms
npm timing config:load:env Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 11ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 0ms
npm timing config:load:user Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v16.14.2/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 1ms
npm timing config:load:validate Completed in 0ms
npm timing config:load:credentials Completed in 1ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 20ms
npm timing npm:load:configload Completed in 20ms
npm timing npm:load:setTitle Completed in 1ms
npm timing config:load:flatten Completed in 3ms
npm timing npm:load:display Completed in 6ms
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-06-25T00_56_24_701Z-debug-0.log
npm timing npm:load:logFile Completed in 7ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 36ms

> test
> jest "tests/"

PASS tests/tests/channel_tests/channelMessages.test.js
PASS tests/tests/channel_tests/channelInvite.test.js
PASS tests/tests/channel_tests/channelJoin.test.js
FAIL tests/tests/channels_tests/channelsListall.test.js
  ● Test when no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      22 |     clearV1();
      23 |     let res = channelsListallV1(uIdZerg)['channels']
    > 24 |     expect(res).toStrictEqual([]);
         |                 ^
      25 | });
      26 |
      27 | test('Test when one channel exists private', () => {

      at Object.<anonymous> (tests/tests/channels_tests/channelsListall.test.js:24:17)

PASS tests/tests/user_tests/userProfile.test.js
PASS tests/tests/channels_tests/channelsList.test.js
FAIL tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrs", "nameFirst": "abcdefghij", "nameLast": "klmnopqrs", "uId": 4}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrs", "nameFirst": "abcdefghij", "nameLast": "klmnopqrs", "password": "Password123", "permissionId": 2, "uId": 4}, {"email": "blah2@email.com", "handleStr": "abcdefghijklmnopqrs0", "nameFirst": "abcdefghij", "nameLast": "klmnopqrs", "password": "Password123", "permissionId": 2, "uId": 5}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrst", "nameFirst": "abcdefghij", "nameLast": "klmnopqrst", "uId": 4}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrst", "nameFirst": "abcdefghij", "nameLast": "klmnopqrst", "password": "Password123", "permissionId": 2, "uId": 4}, {"email": "blah2@email.com", "handleStr": "abcdefghijklmnopqrst0", "nameFirst": "abcdefghij", "nameLast": "klmnopqrst", "password": "Password123", "permissionId": 2, "uId": 5}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 4}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "bcdefghj", "nameLast": "klmnopqrst", "password": "Password123", "permissionId": 2, "uId": 4}, {"email": "blah2@email.com", "handleStr": "bcdefghjklmnopqrst0", "nameFirst": "bcdefghj", "nameLast": "klmnopqrst", "password": "Password123", "permissionId": 2, "uId": 5}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdef0", "nameFirst": "abc", "nameLast": "def0", "uId": 4}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"email": "blah1@email.com", "handleStr": "abcdef0", "nameFirst": "abc", "nameLast": "def0", "password": "Password123", "permissionId": 2, "uId": 4}, {"email": "blah2@email.com", "handleStr": "abcdef1", "nameFirst": "abc", "nameLast": "def", "password": "Password123", "permissionId": 2, "uId": 5}]

      45 |             let expected1 = {'uId': uId1, 'email': email1, 'nameFirst': first1, 'nameLast': last1, 'handleStr': handle1};
      46 |             let expected2 = {'uId': uId2, 'email': email2, 'nameFirst': first2, 'nameLast': last2, 'handleStr': handle2};
    > 47 |             expect(chDeets['allMembers']).toContainEqual(expected1);
         |                                           ^
      48 |             expect(chDeets['allMembers']).toContainEqual(expected2);
      49 |         }
      50 |     );

      at tests/tests/channel_tests/channelDetails.test.js:47:43

PASS tests/tests/other_tests/clear.test.js
PASS tests/tests/channels_tests/channelsCreate.test.js
PASS tests/tests/auth_tests/authLogin.test.js
PASS tests/tests/auth_tests/authRegister.test.js

Test Suites: 2 failed, 9 passed, 11 total
Tests:       5 failed, 47 passed, 52 total
Snapshots:   0 total
Time:        2.181 s
Ran all test suites matching /tests\//i.
npm timing command:run Completed in 3427ms
npm verb exit 1
npm timing npm Completed in 3680ms
npm verb code 1
